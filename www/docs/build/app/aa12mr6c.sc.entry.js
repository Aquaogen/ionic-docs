class e{constructor(){this.handleActive=(e=>{window.history.replaceState(null,null,`#${e.id}`),this.previewMessage.emit({active:e.id})}),this.observeElement=(e=>{e instanceof HTMLElement&&this.observer.observe(e)}),this.linkAPIRef=(e=>{const t=this.doc.createElement("a");t.className="api-link",t.href=`/docs/api/${e.id}`,t.textContent="API â€º",t.title=`${e.textContent.trim()} API Reference`,e.appendChild(t)})}componentWillLoad(){this.handleActive=t(this.handleActive,100),this.observer=new IntersectionObserver(this.handleIntersection.bind(this),{root:this.doc.querySelector("docs-content"),rootMargin:"0px 0px -95% 0px",threshold:0})}handleIntersection(e){e.filter(e=>e.isIntersecting).map(e=>e.target).forEach(this.handleActive)}componentWillUnload(){this.observer.disconnect()}componentDidLoad(){const e=Array.from(this.el.parentElement.parentElement.querySelectorAll("h2"));e.forEach(this.observeElement),e.forEach(this.linkAPIRef)}render(){return null}static get is(){return"component-preview"}static get properties(){return{doc:{context:"document"},el:{elementRef:!0}}}static get events(){return[{name:"previewMessage",method:"previewMessage",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return""}}const t=(e,t)=>{let n;return(...r)=>{clearTimeout(n),n=setTimeout(e,t,...r)}};export{e as ComponentPreview};