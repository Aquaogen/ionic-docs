const e=window.App.h;class o{render(){const o=void 0===this.display?this.value.trim():this.display.trim();return[e("span",{class:"code-color-block",style:{"background-color":this.value}}),e("code",{class:"code-color-value"},o)]}static get is(){return"code-color"}static get properties(){return{display:{type:String,attr:"display"},value:{type:String,attr:"value"}}}static get style(){return"code-color{display:inline-block;vertical-align:bottom}.code-color-block{display:inline-block;width:20px;height:20px;border:1px solid var(--whiteish);border-radius:4px}.code-color-block,.code-color-value{vertical-align:middle}"}}class t{constructor(){this.color="primary"}changeColor(e){this.color=e.detail.value}render(){const o=this.color,t=[{property:`--ion-color-${o}`,name:"Base",description:"The main color that all variations are derived from",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}`)},{property:`--ion-color-${o}-rgb`,name:"Base (rgb)",rgb:!0,description:"The base color in red, green, blue format",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}-rgb`)},{property:`--ion-color-${o}-contrast`,name:"Contrast",description:"The opposite of the base color, should be visible against the base color",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}-contrast`)},{property:`--ion-color-${o}-contrast-rgb`,name:"Contrast (rgb)",rgb:!0,description:"The contrast color in red, green, blue format",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}-contrast-rgb`)},{property:`--ion-color-${o}-shade`,name:"Shade",description:"A slightly darker version of the base color",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}-shade`)},{property:`--ion-color-${o}-tint`,name:"Tint",description:"A slightly lighter version of the base color",value:getComputedStyle(this.el).getPropertyValue(`--ion-color-${o}-tint`)}].map(o=>{const t=o.rgb?`rgb(${o.value})`:`${o.value}`;return e("tr",null,e("td",{class:"color-name"},o.name),e("td",{class:"color-property"},e("code",null,o.property)),e("td",{class:"color-value"},e("code-color",{value:t})),e("td",{class:"color-description"},o.description))});return[e("button",{class:"color-select"},e("span",{class:"color-dot",style:{"background-color":`var(--ion-color-${this.color})`}}),e("ion-select",{value:this.color,interface:"popover",interfaceOptions:{header:"Select a Color",subHeader:"The variations of the color will reflect in the table",cssClass:"temp-fix"},onIonChange:()=>this.changeColor(event)},e("ion-select-option",{value:"primary"},"Primary"),e("ion-select-option",{value:"secondary"},"Secondary"),e("ion-select-option",{value:"tertiary"},"Tertiary"),e("ion-select-option",{value:"success"},"Success"),e("ion-select-option",{value:"warning"},"Warning"),e("ion-select-option",{value:"danger"},"Danger"),e("ion-select-option",{value:"dark"},"Dark"),e("ion-select-option",{value:"medium"},"Medium"),e("ion-select-option",{value:"light"},"Light"))),e("table",null,e("tr",null,e("th",null,"Name"),e("th",null,"Property"),e("th",null,"Default Value"),e("th",null,"Description")),t)]}static get is(){return"layered-colors-select"}static get properties(){return{color:{state:!0},el:{elementRef:!0}}}static get style(){return"layered-colors-select{display:block}.color-select{display:block;position:relative;width:100%;padding:1em;background:inherit;border:0;-webkit-box-shadow:0 4px 6px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.08);box-shadow:0 4px 6px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.08);border-radius:4px;-webkit-transition:all .2s ease;transition:all .2s ease}.color-select:hover{-webkit-transform:translateY(-1px);transform:translateY(-1px);-webkit-box-shadow:0 8px 16px rgba(0,0,0,.1),0 3px 6px rgba(0,0,0,.08);box-shadow:0 8px 16px rgba(0,0,0,.1),0 3px 6px rgba(0,0,0,.08)}.color-dot{display:inline-block;vertical-align:middle;width:20px;height:20px;border-radius:50%;margin-top:-4px}.color-select ion-select{position:static;display:-ms-inline-flexbox;display:inline-flex;width:calc(100% - 20px);font-size:14px;font-weight:700;text-align:left}.color-name,.color-value{width:10%;white-space:nowrap}.color-property{word-break:break-word;width:45%}.color-property code{white-space:pre-wrap;margin-left:0}.color-description{width:35%}"}}export{o as CodeColor,t as LayeredColorsSelect};