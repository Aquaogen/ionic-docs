import { h } from '../app.core.js';
var ColorBlock = /** @class */ (function () {
    function ColorBlock() {
    }
    ColorBlock.prototype.render = function () {
        var display = this.display === undefined ? this.value.trim() : this.display.trim();
        return [
            h("span", { class: "code-color-block", style: {
                    'background-color': this.value
                } }),
            h("code", { class: "code-color-value" }, display)
        ];
    };
    Object.defineProperty(ColorBlock, "is", {
        get: function () { return "code-color"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorBlock, "properties", {
        get: function () {
            return {
                "display": {
                    "type": String,
                    "attr": "display"
                },
                "value": {
                    "type": String,
                    "attr": "value"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorBlock, "style", {
        get: function () { return "/**style-placeholder:code-color:**/"; },
        enumerable: true,
        configurable: true
    });
    return ColorBlock;
}());
var ColorBlock$1 = /** @class */ (function () {
    function ColorBlock$1() {
        this.color = 'primary';
    }
    ColorBlock$1.prototype.changeColor = function (event) {
        this.color = event.detail.value;
    };
    ColorBlock$1.prototype.render = function () {
        var _this = this;
        var popoverOptions = {
            'header': 'Select a Color',
            'subHeader': 'The variations of the color will reflect in the table',
            'cssClass': 'temp-fix'
        };
        var color = this.color;
        var variations = [
            {
                property: "--ion-color-" + color,
                name: 'Base',
                description: 'The main color that all variations are derived from',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color)
            },
            {
                property: "--ion-color-" + color + "-rgb",
                name: 'Base (rgb)',
                rgb: true,
                description: 'The base color in red, green, blue format',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color + "-rgb")
            },
            {
                property: "--ion-color-" + color + "-contrast",
                name: 'Contrast',
                description: 'The opposite of the base color, should be visible against the base color',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color + "-contrast")
            },
            {
                property: "--ion-color-" + color + "-contrast-rgb",
                name: 'Contrast (rgb)',
                rgb: true,
                description: 'The contrast color in red, green, blue format',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color + "-contrast-rgb")
            },
            {
                property: "--ion-color-" + color + "-shade",
                name: 'Shade',
                description: 'A slightly darker version of the base color',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color + "-shade")
            },
            {
                property: "--ion-color-" + color + "-tint",
                name: 'Tint',
                description: 'A slightly lighter version of the base color',
                value: getComputedStyle(this.el).getPropertyValue("--ion-color-" + color + "-tint")
            }
        ];
        var blockItems = variations.map(function (variation) {
            var codeColor = variation.rgb ? "rgb(" + variation.value + ")" : "" + variation.value;
            return (h("tr", null, h("td", { class: "color-name" }, variation.name), h("td", { class: "color-property" }, h("code", null, variation.property)), h("td", { class: "color-value" }, h("code-color", { value: codeColor })), h("td", { class: "color-description" }, variation.description)));
        });
        return [
            h("button", { class: "color-select" }, h("span", { class: "color-dot", style: {
                    'background-color': "var(--ion-color-" + this.color + ")"
                } }), h("ion-select", { value: this.color, interface: "popover", interfaceOptions: popoverOptions, onIonChange: function () { return _this.changeColor(event); } }, h("ion-select-option", { value: "primary" }, "Primary"), h("ion-select-option", { value: "secondary" }, "Secondary"), h("ion-select-option", { value: "tertiary" }, "Tertiary"), h("ion-select-option", { value: "success" }, "Success"), h("ion-select-option", { value: "warning" }, "Warning"), h("ion-select-option", { value: "danger" }, "Danger"), h("ion-select-option", { value: "dark" }, "Dark"), h("ion-select-option", { value: "medium" }, "Medium"), h("ion-select-option", { value: "light" }, "Light"))),
            h("table", null, h("tr", null, h("th", null, "Name"), h("th", null, "Property"), h("th", null, "Default Value"), h("th", null, "Description")), blockItems)
        ];
    };
    Object.defineProperty(ColorBlock$1, "is", {
        get: function () { return "layered-colors-select"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorBlock$1, "properties", {
        get: function () {
            return {
                "color": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorBlock$1, "style", {
        get: function () { return "/**style-placeholder:layered-colors-select:**/"; },
        enumerable: true,
        configurable: true
    });
    return ColorBlock$1;
}());
export { ColorBlock as CodeColor, ColorBlock$1 as LayeredColorsSelect };
