{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/parse-css.ts","localImports":["C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/color-variables","C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/color"],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/parse-css.js"},"jsText":"import { COLOR_VARS } from './color-variables';\r\nimport { Color } from './color';\r\nexport function generateColor(name, property, value) {\r\n    const color = new Color(value);\r\n    const contrast = color.contrast();\r\n    const tint = color.tint();\r\n    const shade = color.shade();\r\n    return {\r\n        name,\r\n        property,\r\n        value,\r\n        valueRgb: rgbToString(color.rgb),\r\n        contrast: contrast.hex,\r\n        contrastRgb: rgbToString(contrast.rgb),\r\n        tint: tint.hex,\r\n        shade: shade.hex,\r\n    };\r\n}\r\nexport function convertCssToColors(cssText) {\r\n    const colors = [];\r\n    COLOR_VARS.forEach(colorVar => {\r\n        const attrMap = {\r\n            value: '',\r\n            valueRgb: '-rgb',\r\n            contrast: '-contrast',\r\n            contrastRgb: '-contrast-rgb',\r\n            shade: '-shade',\r\n            tint: '-tint',\r\n        };\r\n        const color = Object.assign({}, colorVar);\r\n        Object.keys(attrMap).forEach(key => {\r\n            color[key] = parseColorVar(colorVar.property + attrMap[key], cssText);\r\n        });\r\n        colors.push(color);\r\n    });\r\n    return colors;\r\n}\r\nexport function updateCssText(colorAttr, cssText, newColorValue) {\r\n    const oldKeyValue = getCssKeyVal(colorAttr, cssText);\r\n    const newKeyValue = `${colorAttr}: ${newColorValue}`;\r\n    cssText = cssText.replace(oldKeyValue, newKeyValue);\r\n    return cssText;\r\n}\r\nfunction parseColorVar(colorAttr, cssText) {\r\n    const attrKeyVal = getCssKeyVal(colorAttr, cssText);\r\n    return attrKeyVal.trim().split(':')[1].trim();\r\n}\r\nfunction getCssKeyVal(colorAttr, cssText) {\r\n    const startIndex = cssText.indexOf(colorAttr);\r\n    const valueSplt = cssText.substring(startIndex + colorAttr.length);\r\n    const bracketIndex = valueSplt.indexOf('}');\r\n    const semiColonIndex = valueSplt.indexOf(';');\r\n    const endIndex = startIndex + colorAttr.length + Math.min(bracketIndex, semiColonIndex);\r\n    return cssText.substring(startIndex, endIndex);\r\n}\r\nfunction rgbToString(c) {\r\n    return `${c.r},${c.g},${c.b}`;\r\n}\r\n"}