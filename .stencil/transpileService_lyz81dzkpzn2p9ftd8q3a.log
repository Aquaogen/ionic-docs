{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/markdown.ts","localImports":["C:/Users/Administrator/Desktop/ionic-docs-v1/src/versions","C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/docs-menu/docs-api-map"],"externalImports":["highlight.js","marked","marked","highlight.js"],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/markdown.js"},"jsText":"import marked from 'marked';\r\nimport hljs from 'highlight.js';\r\nimport { current } from './versions';\r\nimport { apiMap } from './components/docs-menu/docs-api-map';\r\nconst components = apiMap[current] || [];\r\nexport const toCodeBlock = (code, lang = '') => `<code-block language=\"${lang}\">${hljs.highlightAuto(code, [lang]).value}</code-block>`;\r\nconst toPreviewBlock = (code, lang = '', options = {}) => `\n  <tab-group tabs=\"markup preview\" initial=\"${options.initialTab || ''}\">\n    <code-block slot=\"markup\" language=\"${lang}\">${hljs.highlightAuto(code, [lang]).value}</code-block>\n    <code-preview slot=\"preview\" markup=\"${escape(code)}\" inline=\"${!!options.inlineHtmlPreviews}\"></code-preview>\n  </tab-group>\n`;\r\nconst generateHeadingID = (inText) => {\r\n    let text = inText;\r\n    text = text.toLowerCase()\r\n        .replace(/&#?[a-z0-9]+;/i, '')\r\n        .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, '$1 $2')\r\n        .replace(/[^0-9a-zA-Z\\xC0-\\xFF \\-]/g, '')\r\n        .replace(/ +/g, '-');\r\n    return text;\r\n};\r\nexport function renderMarkdown(markdown, options) {\r\n    const renderer = new marked.Renderer();\r\n    const headings = [];\r\n    renderer.image = (href = '', title) => `\n    <img-zoom>\n      <img src=\"${href}\" ${title && `title=\"${title}\"`} />\n    </img-zoom>\n  `;\r\n    renderer.heading = (text, level) => {\r\n        const hasNestedTags = /<.+>(.+)<\\/.+>/.test(text);\r\n        if (level > 3 || hasNestedTags) {\r\n            return `<h${level}>${text}</h${level}>`;\r\n        }\r\n        const anchorId = generateHeadingID(text);\r\n        headings.push({ text, level, anchorId });\r\n        return `\n      <h${level} id=\"${anchorId}\">\n        <a href=\"#${anchorId}\" class=\"linked\">${text}</a>\n      </h${level}>\n    `;\r\n    };\r\n    renderer.code = (code, lang) => {\r\n        if (lang === 'html' && options.disableHtmlPreviews !== true) {\r\n            return toPreviewBlock(code, lang, options);\r\n        }\r\n        return toCodeBlock(code, lang);\r\n    };\r\n    renderer.codespan = code => {\r\n        if (code.indexOf('ion-') !== -1) {\r\n            const converted = code.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-')\r\n                .toLowerCase()\r\n                .replace('ion-', '');\r\n            if (components[converted]) {\r\n                code = `<a href=\"${components[converted]}\" class=\"auto-link\">${code}</a>`;\r\n            }\r\n        }\r\n        return `<code>${code}</code>`;\r\n    };\r\n    renderer.table = (thead, tbody) => `<div class=\"table-wrap\">\n      <table>\n        <thead>\n          ${thead}\n        </thead>\n        <tbody>\n          ${tbody}\n        </tbody>\n      </table>\n    </div>`;\r\n    return {\r\n        headings,\r\n        body: marked(markdown, { renderer })\r\n    };\r\n}\r\n"}