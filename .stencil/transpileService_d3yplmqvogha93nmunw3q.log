{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/ionic-search/ionic-search.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[{"tag":"ion-icon"}],"cmpMeta":{"tagNameMeta":"ionic-search","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/ionic-search/ionic-search.scss","cmpRelativePath":"ionic-search.scss","originalComponentPath":"ionic-search.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"IonicSearch","tags":[],"documentation":"","type":"typeof IonicSearch"},"encapsulationMeta":0,"componentClass":"IonicSearch","membersMeta":{"el":{"memberType":64},"active":{"memberType":16},"query":{"memberType":16},"pending":{"memberType":16},"results":{"memberType":16},"dragStyles":{"memberType":16},"selectedIndex":{"memberType":16},"focused":{"memberType":16},"contentEl":{"memberType":16},"mobile":{"memberType":1,"attribName":"mobile","attribType":{"text":"boolean","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"mobile","tags":[],"documentation":"","type":"boolean"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/ionic-search/ionic-search.js"},"jsText":"export class IonicSearch {\r\n    constructor() {\r\n        this.active = false;\r\n        this.query = '';\r\n        this.pending = 0;\r\n        this.results = null;\r\n        this.selectedIndex = -1;\r\n        this.focused = false;\r\n        this.dragY = null;\r\n        this.startY = null;\r\n        this.screenHeight = null;\r\n        this.URLS = () => {\r\n            const api = 'https://api.swiftype.com/api/v1/public/engines/';\r\n            const key = '9oVyaKGPzxoZAyUo9Sm8';\r\n            return {\r\n                autocomplete: query => `${api}suggest.json?q=${query}&engine_key=${key}`,\r\n                search: query => `${api}search.json?q=${query}&engine_key=${key}`\r\n            };\r\n        };\r\n        this.close = this.close.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.focus = this.focus.bind(this);\r\n        this.urls = this.URLS();\r\n    }\r\n    close() {\r\n        this.active = false;\r\n        this.query = '';\r\n        this.focused = false;\r\n        this.selectedIndex = -1;\r\n        this.el.querySelector('input').value = '';\r\n        this.el.classList.remove('active');\r\n        this.el.querySelector('input').blur();\r\n        setTimeout(() => {\r\n            this.results = null;\r\n        }, 500, this);\r\n    }\r\n    async onKeyDown(e) {\r\n        if (e.keyCode === 27) {\r\n            this.close();\r\n            return;\r\n        }\r\n        if (e.keyCode === 38 && this.selectedIndex > 0) {\r\n            this.selectedIndex--;\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        if (e.keyCode === 40 &&\r\n            this.selectedIndex <\r\n                this.results.beta.length + this.results.main.length - 1) {\r\n            this.selectedIndex++;\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        if (e.keyCode === 13) {\r\n            const selector = `li a[data-index=\"${this.selectedIndex}\"]`;\r\n            const link = this.el.querySelector(selector);\r\n            if (link) {\r\n                link.click();\r\n            }\r\n            return;\r\n        }\r\n        const query = this.query = e.target.value;\r\n        if (e.target.value.length < 3) {\r\n            this.results = null;\r\n            return;\r\n        }\r\n        this.pending++;\r\n        const resp = await fetch(this.urls.autocomplete(query));\r\n        const res = await resp.json();\r\n        this.pending--;\r\n        this.results = res.records.page.reduce((groups, item) => {\r\n            if (!groups.beta) {\r\n                groups = { beta: [], main: [] };\r\n            }\r\n            if (item.url.indexOf('beta.ionicframework.com') !== -1) {\r\n                groups.beta.push(item);\r\n            }\r\n            else {\r\n                groups.main.push(item);\r\n            }\r\n            return groups;\r\n        });\r\n    }\r\n    focus() {\r\n        const input = document.getElementById('search-input');\r\n        if (input) {\r\n            input.focus();\r\n        }\r\n    }\r\n    getBoxClass() {\r\n        let str = 'search-box';\r\n        str += this.query.length > 3 ? ' active' : '';\r\n        str += this.focused ? ' focused' : '';\r\n        return str;\r\n    }\r\n    printResults(group, index = 0) {\r\n        return group.map((result, i) => h(\"li\", { class: \"result\" },\r\n            h(\"a\", { href: result.url, title: result.title, class: this.selectedIndex === i + index ? 'selected' : '', \"data-index\": i + index, onMouseOver: () => { this.selectedIndex = i + index; } },\r\n                h(\"strong\", null, result.title),\r\n                h(\"small\", { innerHTML: result.highlight.sections }))));\r\n    }\r\n    render() {\r\n        return [\r\n            h(\"div\", { class: this.getBoxClass(), style: this.dragStyles },\r\n                h(\"input\", { type: \"text\", id: \"search-input\", onKeyUp: this.onKeyDown, onFocus: () => { this.focused = true; }, placeholder: \"Search Ionic..\" }),\r\n                h(\"ion-icon\", { class: `search-static ${this.active ? ' active' : ''}`, name: \"md-search\" }),\r\n                h(\"ion-icon\", { class: `close ${this.query.length ? ' active' : ''}`, name: \"close-circle\", onClick: this.close }),\r\n                this.results !== null ? h(\"ul\", null,\r\n                    this.results.beta.length ?\r\n                        h(\"li\", { class: \"title\" }, \"beta.ionicframework.com\")\r\n                        : null,\r\n                    this.printResults(this.results.beta),\r\n                    this.results.main.length ?\r\n                        h(\"li\", { class: \"title\" }, \"ionicframework.com\")\r\n                        : null,\r\n                    this.printResults(this.results.main, this.results.beta.length),\r\n                    this.results.length === 0 ?\r\n                        h(\"li\", null,\r\n                            h(\"span\", { class: \"no-results\" }, \"No results\"))\r\n                        : null) : null,\r\n                this.pending > 0 ? h(\"span\", { class: \"searching\" }) : null),\r\n            h(\"ion-icon\", { class: `search-mobile-toggle ${this.focused ? ' focused' : ''}`, onClick: this.focus, name: \"md-search\" }),\r\n            h(\"div\", { class: `scroll-block ${this.focused ? ' focused' : ''}`, onClick: this.close })\r\n        ];\r\n    }\r\n    static get is() { return \"ionic-search\"; }\r\n    static get properties() { return {\r\n        \"active\": {\r\n            \"state\": true\r\n        },\r\n        \"contentEl\": {\r\n            \"state\": true\r\n        },\r\n        \"dragStyles\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"focused\": {\r\n            \"state\": true\r\n        },\r\n        \"mobile\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"mobile\"\r\n        },\r\n        \"pending\": {\r\n            \"state\": true\r\n        },\r\n        \"query\": {\r\n            \"state\": true\r\n        },\r\n        \"results\": {\r\n            \"state\": true\r\n        },\r\n        \"selectedIndex\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:ionic-search:**/\"; }\r\n}\r\n"}