{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/color.ts","localImports":[],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/color-gen/color.js"},"jsText":"function componentToHex(c) {\r\n    const hex = c.toString(16);\r\n    return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\nfunction expandHex(hex) {\r\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, (_m, r, g, b) => {\r\n        return r + r + g + g + b + b;\r\n    });\r\n    return `#${hex.replace('#', '')}`;\r\n}\r\nfunction hexToRGB(hex) {\r\n    hex = expandHex(hex);\r\n    hex = hex.replace('#', '');\r\n    const intValue = parseInt(hex, 16);\r\n    return {\r\n        r: (intValue >> 16) & 255,\r\n        g: (intValue >> 8) & 255,\r\n        b: intValue & 255\r\n    };\r\n}\r\nfunction hslToRGB({ h, s, l }) {\r\n    h = h / 360;\r\n    s = s / 100;\r\n    l = l / 100;\r\n    if (s === 0) {\r\n        l = Math.round(l * 255);\r\n        return {\r\n            r: l,\r\n            g: l,\r\n            b: l\r\n        };\r\n    }\r\n    const hue2rgb = (p, q, t) => {\r\n        if (t < 0)\r\n            t += 1;\r\n        if (t > 1)\r\n            t -= 1;\r\n        if (t < 1 / 6)\r\n            return p + (q - p) * 6 * t;\r\n        if (t < 1 / 2)\r\n            return q;\r\n        if (t < 2 / 3)\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        return p;\r\n    }, q = l < 0.5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q, r = hue2rgb(p, q, h + (1 / 3)), g = hue2rgb(p, q, h), b = hue2rgb(p, q, h - (1 / 3));\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\nfunction mixColors(color, mixColor, weight = .5) {\r\n    const colorRGB = color.rgb, mixColorRGB = mixColor.rgb, mixColorWeight = 1 - weight;\r\n    return {\r\n        r: Math.round(weight * mixColorRGB.r + mixColorWeight * colorRGB.r),\r\n        g: Math.round(weight * mixColorRGB.g + mixColorWeight * colorRGB.g),\r\n        b: Math.round(weight * mixColorRGB.b + mixColorWeight * colorRGB.b)\r\n    };\r\n}\r\nfunction rgbToHex({ r, g, b }) {\r\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\nfunction rgbToHSL({ r, g, b }) {\r\n    r = Math.max(Math.min(r / 255, 1), 0);\r\n    g = Math.max(Math.min(g / 255, 1), 0);\r\n    b = Math.max(Math.min(b / 255, 1), 0);\r\n    const max = Math.max(r, g, b), min = Math.min(r, g, b), l = Math.min(1, Math.max(0, (max + min) / 2));\r\n    let d, h, s;\r\n    if (max !== min) {\r\n        d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        if (max === r) {\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n        }\r\n        else if (max === g) {\r\n            h = (b - r) / d + 2;\r\n        }\r\n        else {\r\n            h = (r - g) / d + 4;\r\n        }\r\n        h = h / 6;\r\n    }\r\n    else {\r\n        h = s = 0;\r\n    }\r\n    return {\r\n        h: Math.round(h * 360),\r\n        s: Math.round(s * 100),\r\n        l: Math.round(l * 100)\r\n    };\r\n}\r\nfunction rgbToYIQ({ r, g, b }) {\r\n    return ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n}\r\nexport class Color {\r\n    constructor(value) {\r\n        if (typeof (value) === 'string' && /rgb\\(/.test(value)) {\r\n            const matches = /rgb\\((\\d{1,3}), ?(\\d{1,3}), ?(\\d{1,3})\\)/.exec(value);\r\n            value = { r: parseInt(matches[0], 10), g: parseInt(matches[1], 10), b: parseInt(matches[2], 10) };\r\n        }\r\n        else if (typeof (value) === 'string' && /hsl\\(/.test(value)) {\r\n            const matches = /hsl\\((\\d{1,3}), ?(\\d{1,3}%), ?(\\d{1,3}%)\\)/.exec(value);\r\n            value = { h: parseInt(matches[0], 10), s: parseInt(matches[1], 10), l: parseInt(matches[2], 10) };\r\n        }\r\n        if (typeof (value) === 'string') {\r\n            value = value.replace(/\\s/g, '');\r\n            this.hex = expandHex(value);\r\n            this.rgb = hexToRGB(this.hex);\r\n            this.hsl = rgbToHSL(this.rgb);\r\n        }\r\n        else if ('r' in value && 'g' in value && 'b' in value) {\r\n            this.rgb = value;\r\n            this.hex = rgbToHex(this.rgb);\r\n            this.hsl = rgbToHSL(this.rgb);\r\n        }\r\n        else if ('h' in value && 's' in value && 'l' in value) {\r\n            this.hsl = value;\r\n            this.rgb = hslToRGB(this.hsl);\r\n            this.hex = rgbToHex(this.rgb);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n        this.yiq = rgbToYIQ(this.rgb);\r\n    }\r\n    static isColor(value) {\r\n        if (/rgb\\((\\d{1,3}), ?(\\d{1,3}), ?(\\d{1,3})\\)/.test(value))\r\n            return true;\r\n        return /(^#[0-9a-fA-F]+)/.test(value.trim());\r\n    }\r\n    contrast(threshold = 128) {\r\n        return new Color((this.yiq >= threshold ? '#000' : '#fff'));\r\n    }\r\n    mix(from, amount = .5) {\r\n        const base = from instanceof Color ? from : new Color(from);\r\n        return new Color(mixColors(this, base, amount));\r\n    }\r\n    shade(weight = .12) {\r\n        return this.mix({ r: 0, g: 0, b: 0 }, weight);\r\n    }\r\n    tint(weight = .1) {\r\n        return this.mix({ r: 255, g: 255, b: 255 }, weight);\r\n    }\r\n    toList() {\r\n        const { r, g, b } = this.rgb;\r\n        return `${r},${g},${b}`;\r\n    }\r\n}\r\n"}