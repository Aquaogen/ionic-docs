import { h } from '../app.core.js';
import { a as Color } from './chunk-d4167b8b.js';
function generateSteppedColors(background, text) {
    if (background === void 0) { background = '#ffffff'; }
    if (text === void 0) { text = '#000000'; }
    var color = new Color(background);
    var steps = '';
    for (var i = 5; i < 100; i = i + 5) {
        var step = i + '0';
        var amount = i / 100.0;
        steps += "  --ion-color-step-" + step + ": <code-color value=\"" + color.mix(text, amount).hex + "\"></code-color>;";
        if (i < 95) {
            steps += '\n';
        }
    }
    return steps;
}
var ColorGenerator = /** @class */ (function () {
    function ColorGenerator() {
        this.cssText = DEFAULT_CSS_TEXT;
        this.backgroundColor = '#ffffff';
        this.textColor = '#000000';
    }
    ColorGenerator.prototype.onColorChange = function () {
        var background = this.el.querySelector('#background').value;
        var text = this.el.querySelector('#text').value;
        this.backgroundColor = background;
        this.textColor = text;
        var backgroundColor = new Color(background);
        var textColor = new Color(text);
        var steppedColors = generateSteppedColors(background, text);
        this.cssText =
            ":root {\n  --ion-background-color: <code-color value=\"" + background + "\"></code-color>;\n  --ion-background-color-rgb: <code-color value=\"" + background + "\" display=\"" + backgroundColor.toList() + "\"></code-color>;\n\n  --ion-text-color: <code-color value=\"" + text + "\"></code-color>;\n  --ion-text-color-rgb: <code-color value=\"" + text + "\" display=\"" + textColor.toList() + "\"></code-color>;\n\n" + steppedColors + "\n}";
    };
    ColorGenerator.prototype.onCssTextChange = function (ev) {
        this.cssText = ev.detail;
    };
    ColorGenerator.prototype.render = function () {
        return [
            h("div", { class: "stepped-color-pickers" }, h("color-gen-variable-selector", { id: "background", name: "Background", value: this.backgroundColor }), h("color-gen-variable-selector", { id: "text", name: "Text", value: this.textColor })),
            h("color-gen-css-text", { cssText: this.cssText })
        ];
    };
    Object.defineProperty(ColorGenerator, "is", {
        get: function () { return "stepped-color-generator"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGenerator, "properties", {
        get: function () {
            return {
                "backgroundColor": {
                    "state": true
                },
                "cssText": {
                    "state": true
                },
                "el": {
                    "elementRef": true
                },
                "textColor": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGenerator, "listeners", {
        get: function () {
            return [{
                    "name": "colorChange",
                    "method": "onColorChange"
                }, {
                    "name": "cssTextChange",
                    "method": "onCssTextChange"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorGenerator, "style", {
        get: function () { return "/**style-placeholder:stepped-color-generator:**/"; },
        enumerable: true,
        configurable: true
    });
    return ColorGenerator;
}());
var DEFAULT_CSS_TEXT = "\n:root {\n  --ion-background-color: <code-color value=\"#ffffff\"></code-color>;\n  --ion-background-color-rgb: <code-color value=\"#ffffff\" display=\"255,255,255\"></code-color>;\n\n  --ion-text-color: <code-color value=\"#000000\"></code-color>;\n  --ion-text-color-rgb: <code-color value=\"#000000\" display=\"0,0,0\"></code-color>;\n\n  --ion-color-step-50: <code-color value=\"#f2f2f2\"></code-color>;\n  --ion-color-step-100: <code-color value=\"#e6e6e6\"></code-color>;\n  --ion-color-step-150: <code-color value=\"#d9d9d9\"></code-color>;\n  --ion-color-step-200: <code-color value=\"#cccccc\"></code-color>;\n  --ion-color-step-250: <code-color value=\"#bfbfbf\"></code-color>;\n  --ion-color-step-300: <code-color value=\"#b3b3b3\"></code-color>;\n  --ion-color-step-350: <code-color value=\"#a6a6a6\"></code-color>;\n  --ion-color-step-400: <code-color value=\"#999999\"></code-color>;\n  --ion-color-step-450: <code-color value=\"#8c8c8c\"></code-color>;\n  --ion-color-step-500: <code-color value=\"#808080\"></code-color>;\n  --ion-color-step-550: <code-color value=\"#737373\"></code-color>;\n  --ion-color-step-600: <code-color value=\"#666666\"></code-color>;\n  --ion-color-step-650: <code-color value=\"#595959\"></code-color>;\n  --ion-color-step-700: <code-color value=\"#4d4d4d\"></code-color>;\n  --ion-color-step-750: <code-color value=\"#404040\"></code-color>;\n  --ion-color-step-800: <code-color value=\"#333333\"></code-color>;\n  --ion-color-step-850: <code-color value=\"#262626\"></code-color>;\n  --ion-color-step-900: <code-color value=\"#191919\"></code-color>;\n  --ion-color-step-950: <code-color value=\"#0d0d0d\"></code-color>;\n}\n".trim();
export { ColorGenerator as SteppedColorGenerator };
