{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/docs-document/docs-document.tsx","localImports":["C:/Users/Administrator/Desktop/ionic-docs-v1/src/markdown"],"externalImports":["@stencil/core","front-matter","front-matter"],"potentialCmpRefs":[{"tag":"ion-icon"},{"tag":"loading-indicator"},{"tag":"docs-footer"}],"cmpMeta":{"tagNameMeta":"docs-document","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/docs-document/docs-document.scss","cmpRelativePath":"docs-document.scss","originalComponentPath":"docs-document.scss"},{"absolutePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/docs-document/table-of-contents.scss","cmpRelativePath":"table-of-contents.scss","originalComponentPath":"table-of-contents.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DocsDocument","tags":[],"documentation":"","type":"typeof DocsDocument"},"encapsulationMeta":0,"componentClass":"DocsDocument","membersMeta":{"isLoading":{"memberType":16},"body":{"memberType":16},"title":{"memberType":16},"hideTOC":{"memberType":16},"frontMatter":{"memberType":16},"tocHeadings":{"memberType":16},"pageClass":{"memberType":16},"attributes":{"memberType":16},"path":{"memberType":1,"attribName":"path","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"path","tags":[],"documentation":"","type":"string"},"watchCallbacks":["fetchDocument"]},"onUpdate":{"memberType":1,"attribName":"on-update","attribType":{"text":"(document) => void","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"onUpdate","tags":[],"documentation":"","type":"(document: any) => void","default":"() => {}"}},"document":{"memberType":4,"ctrlId":"document"},"isServer":{"memberType":4,"ctrlId":"isServer"},"isLoadingTimeout":{"memberType":1,"attribName":"is-loading-timeout","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"isLoadingTimeout","tags":[],"documentation":"","type":"number","default":"1000"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/docs-document/docs-document.js"},"jsText":"import frontMatter from 'front-matter';\r\nimport { renderMarkdown } from '../../markdown';\r\nexport class DocsDocument {\r\n    constructor() {\r\n        this.onUpdate = () => { };\r\n        this.isLoadingTimeout = 1000;\r\n        this.isLoading = false;\r\n        this.hideTOC = false;\r\n        this.frontMatter = {};\r\n        this.tocHeadings = [];\r\n        this.attributes = {};\r\n        this.loadingTimer = null;\r\n        this.validateResponse = res => {\r\n            if (!res.ok)\r\n                throw new Error(`Unable to fetch ${this.path}: ${res.statusText}`);\r\n            return res;\r\n        };\r\n        this.parseDocument = res => {\r\n            return res.text()\r\n                .then(frontMatter)\r\n                .then(this.stripTitle)\r\n                .then(({ attributes, body }) => (Object.assign({ attributes }, renderMarkdown(body, attributes))));\r\n        };\r\n        this.handleNewContent = ({ attributes, body, headings }) => {\r\n            this.body = body;\r\n            this.title = attributes.title;\r\n            this.hideTOC = attributes.hideTOC;\r\n            this.frontMatter = attributes;\r\n            this.tocHeadings = this.hideTOC ? [] : headings;\r\n            this.attributes = attributes;\r\n            this.pageClass = this.path.replace(/\\//g, '-');\r\n            this.clearLoadingTimer();\r\n            this.setDocumentTitle(this.title);\r\n            this.onUpdate(Object.assign({}, attributes, { body,\r\n                headings, pageClass: this.pageClass }));\r\n        };\r\n        this.handleFetchError = err => {\r\n            this.title = '';\r\n            this.hideTOC = true;\r\n            this.body = err.message;\r\n            this.clearLoadingTimer();\r\n        };\r\n        this.stripTitle = ({ attributes, body }) => {\r\n            const match = /^# (.*?)$/gm.exec(body);\r\n            if (match) {\r\n                const [titleLine, title] = match;\r\n                body = body.replace(titleLine, '');\r\n                attributes.title = attributes.title || title;\r\n            }\r\n            return { attributes, body };\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        return this.fetchDocument();\r\n    }\r\n    fetchDocument() {\r\n        this.setLoadingTimer();\r\n        return fetch(`/docs/content/${this.path}.md`)\r\n            .then(this.validateResponse)\r\n            .then(this.parseDocument)\r\n            .then(this.handleNewContent)\r\n            .catch(this.handleFetchError);\r\n    }\r\n    setLoadingTimer() {\r\n        this.loadingTimer = setTimeout(() => {\r\n            this.isLoading = true;\r\n        }, this.isLoadingTimeout);\r\n    }\r\n    clearLoadingTimer() {\r\n        clearTimeout(this.loadingTimer);\r\n        this.isLoading = false;\r\n    }\r\n    setDocumentTitle(title) {\r\n        const pageTitle = `${title ? `${title} - ` : ''}Ionic Docs`;\r\n        this.document.title = pageTitle;\r\n        this.document.head.querySelector('meta[property=\"og:title\"]').setAttribute('content', pageTitle);\r\n    }\r\n    renderPreviewLink() {\r\n        if (!this.attributes.previewUrl)\r\n            return null;\r\n        return (h(\"a\", { href: this.attributes.previewUrl, class: \"open-preview\", target: \"_blank\" },\r\n            h(\"ion-icon\", { name: \"md-open\" }),\r\n            \"Open Preview\"));\r\n    }\r\n    render() {\r\n        if (this.isLoading) {\r\n            return this.isServer ? null : h(\"loading-indicator\", null);\r\n        }\r\n        const headings = this.tocHeadings.filter(heading => heading.level < 3);\r\n        return [\r\n            h(\"h1\", null, this.title),\r\n            this.renderPreviewLink(),\r\n            h(\"div\", { class: \"table-of-contents\" }, (headings.length > 0) && !this.hideTOC ? [\r\n                h(\"strong\", { class: \"toc-label\" }, \"Contents\"),\r\n                h(\"ul\", { class: \"toc-list\" }, headings.map(heading => {\r\n                    return (h(\"li\", { class: \"toc-item\" },\r\n                        h(\"a\", { href: `#${heading.anchorId}`, innerHTML: heading.text })));\r\n                }))\r\n            ] : null),\r\n            h(\"main\", { innerHTML: this.body }),\r\n            !this.frontMatter.hideFooter && h(\"docs-footer\", { frontmatter: this.frontMatter, path: this.path })\r\n        ];\r\n    }\r\n    static get is() { return \"docs-document\"; }\r\n    static get properties() { return {\r\n        \"attributes\": {\r\n            \"state\": true\r\n        },\r\n        \"body\": {\r\n            \"state\": true\r\n        },\r\n        \"document\": {\r\n            \"context\": \"document\"\r\n        },\r\n        \"frontMatter\": {\r\n            \"state\": true\r\n        },\r\n        \"hideTOC\": {\r\n            \"state\": true\r\n        },\r\n        \"isLoading\": {\r\n            \"state\": true\r\n        },\r\n        \"isLoadingTimeout\": {\r\n            \"type\": Number,\r\n            \"attr\": \"is-loading-timeout\"\r\n        },\r\n        \"isServer\": {\r\n            \"context\": \"isServer\"\r\n        },\r\n        \"onUpdate\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"on-update\"\r\n        },\r\n        \"pageClass\": {\r\n            \"state\": true\r\n        },\r\n        \"path\": {\r\n            \"type\": String,\r\n            \"attr\": \"path\",\r\n            \"watchCallbacks\": [\"fetchDocument\"]\r\n        },\r\n        \"title\": {\r\n            \"state\": true\r\n        },\r\n        \"tocHeadings\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:docs-document:**/\"; }\r\n}\r\n"}