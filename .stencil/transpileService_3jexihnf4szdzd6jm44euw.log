{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/layered-colors-select/layered-colors-select.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[{"tag":"code-color"},{"tag":"ion-select"},{"tag":"ion-select-option"}],"cmpMeta":{"tagNameMeta":"layered-colors-select","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/layered-colors-select/layered-colors-select.css","cmpRelativePath":"layered-colors-select.css","originalComponentPath":"layered-colors-select.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"ColorBlock","tags":[],"documentation":"","type":"typeof ColorBlock"},"encapsulationMeta":0,"componentClass":"ColorBlock","membersMeta":{"el":{"memberType":64},"color":{"memberType":16}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/layered-colors-select/layered-colors-select.js"},"jsText":"export class ColorBlock {\r\n    constructor() {\r\n        this.color = 'primary';\r\n    }\r\n    changeColor(event) {\r\n        this.color = event.detail.value;\r\n    }\r\n    render() {\r\n        const popoverOptions = {\r\n            'header': 'Select a Color',\r\n            'subHeader': 'The variations of the color will reflect in the table',\r\n            'cssClass': 'temp-fix'\r\n        };\r\n        const color = this.color;\r\n        const variations = [\r\n            {\r\n                property: `--ion-color-${color}`,\r\n                name: 'Base',\r\n                description: 'The main color that all variations are derived from',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}`)\r\n            },\r\n            {\r\n                property: `--ion-color-${color}-rgb`,\r\n                name: 'Base (rgb)',\r\n                rgb: true,\r\n                description: 'The base color in red, green, blue format',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}-rgb`)\r\n            },\r\n            {\r\n                property: `--ion-color-${color}-contrast`,\r\n                name: 'Contrast',\r\n                description: 'The opposite of the base color, should be visible against the base color',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}-contrast`)\r\n            },\r\n            {\r\n                property: `--ion-color-${color}-contrast-rgb`,\r\n                name: 'Contrast (rgb)',\r\n                rgb: true,\r\n                description: 'The contrast color in red, green, blue format',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}-contrast-rgb`)\r\n            },\r\n            {\r\n                property: `--ion-color-${color}-shade`,\r\n                name: 'Shade',\r\n                description: 'A slightly darker version of the base color',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}-shade`)\r\n            },\r\n            {\r\n                property: `--ion-color-${color}-tint`,\r\n                name: 'Tint',\r\n                description: 'A slightly lighter version of the base color',\r\n                value: getComputedStyle(this.el).getPropertyValue(`--ion-color-${color}-tint`)\r\n            }\r\n        ];\r\n        const blockItems = variations.map(variation => {\r\n            const codeColor = variation.rgb ? `rgb(${variation.value})` : `${variation.value}`;\r\n            return (h(\"tr\", null,\r\n                h(\"td\", { class: \"color-name\" }, variation.name),\r\n                h(\"td\", { class: \"color-property\" },\r\n                    h(\"code\", null, variation.property)),\r\n                h(\"td\", { class: \"color-value\" },\r\n                    h(\"code-color\", { value: codeColor })),\r\n                h(\"td\", { class: \"color-description\" }, variation.description)));\r\n        });\r\n        return [\r\n            h(\"button\", { class: \"color-select\" },\r\n                h(\"span\", { class: \"color-dot\", style: {\r\n                        'background-color': `var(--ion-color-${this.color})`\r\n                    } }),\r\n                h(\"ion-select\", { value: this.color, interface: \"popover\", interfaceOptions: popoverOptions, onIonChange: () => this.changeColor(event) },\r\n                    h(\"ion-select-option\", { value: \"primary\" }, \"Primary\"),\r\n                    h(\"ion-select-option\", { value: \"secondary\" }, \"Secondary\"),\r\n                    h(\"ion-select-option\", { value: \"tertiary\" }, \"Tertiary\"),\r\n                    h(\"ion-select-option\", { value: \"success\" }, \"Success\"),\r\n                    h(\"ion-select-option\", { value: \"warning\" }, \"Warning\"),\r\n                    h(\"ion-select-option\", { value: \"danger\" }, \"Danger\"),\r\n                    h(\"ion-select-option\", { value: \"dark\" }, \"Dark\"),\r\n                    h(\"ion-select-option\", { value: \"medium\" }, \"Medium\"),\r\n                    h(\"ion-select-option\", { value: \"light\" }, \"Light\"))),\r\n            h(\"table\", null,\r\n                h(\"tr\", null,\r\n                    h(\"th\", null, \"Name\"),\r\n                    h(\"th\", null, \"Property\"),\r\n                    h(\"th\", null, \"Default Value\"),\r\n                    h(\"th\", null, \"Description\")),\r\n                blockItems)\r\n        ];\r\n    }\r\n    static get is() { return \"layered-colors-select\"; }\r\n    static get properties() { return {\r\n        \"color\": {\r\n            \"state\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:layered-colors-select:**/\"; }\r\n}\r\n"}