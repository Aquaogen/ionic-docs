{"moduleFile":{"sourceFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/component-preview/component-preview.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"component-preview","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/component-preview/component-preview.scss","cmpRelativePath":"component-preview.scss","originalComponentPath":"component-preview.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"ComponentPreview","tags":[],"documentation":"","type":"typeof ComponentPreview"},"encapsulationMeta":0,"componentClass":"ComponentPreview","membersMeta":{"el":{"memberType":64},"doc":{"memberType":4,"ctrlId":"document"}},"eventsMeta":[{"eventMethodName":"previewMessage","eventName":"previewMessage","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"previewMessage","tags":[],"documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"C:/Users/Administrator/Desktop/ionic-docs-v1/src/components/component-preview/component-preview.js"},"jsText":"export class ComponentPreview {\r\n    constructor() {\r\n        this.handleActive = (active) => {\r\n            window.history.replaceState(null, null, `#${active.id}`);\r\n            this.previewMessage.emit({\r\n                active: active.id\r\n            });\r\n        };\r\n        this.observeElement = (el) => {\r\n            if (el instanceof HTMLElement) {\r\n                this.observer.observe(el);\r\n            }\r\n        };\r\n        this.linkAPIRef = (el) => {\r\n            const link = this.doc.createElement('a');\r\n            link.className = 'api-link';\r\n            link.href = `/docs/api/${el.id}`;\r\n            link.textContent = 'API â€º';\r\n            link.title = `${el.textContent.trim()} API Reference`;\r\n            el.appendChild(link);\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        this.handleActive = debounce(this.handleActive, 100);\r\n        this.observer = new IntersectionObserver(this.handleIntersection.bind(this), {\r\n            root: this.doc.querySelector('docs-content'),\r\n            rootMargin: '0px 0px -95% 0px',\r\n            threshold: 0\r\n        });\r\n    }\r\n    handleIntersection(entries) {\r\n        entries\r\n            .filter(entry => entry.isIntersecting)\r\n            .map(entry => entry.target)\r\n            .forEach(this.handleActive);\r\n    }\r\n    componentWillUnload() {\r\n        this.observer.disconnect();\r\n    }\r\n    componentDidLoad() {\r\n        const contentEl = this.el.parentElement.parentElement;\r\n        const headings = Array.from(contentEl.querySelectorAll('h2'));\r\n        headings.forEach(this.observeElement);\r\n        headings.forEach(this.linkAPIRef);\r\n    }\r\n    render() {\r\n        return null;\r\n    }\r\n    static get is() { return \"component-preview\"; }\r\n    static get properties() { return {\r\n        \"doc\": {\r\n            \"context\": \"document\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"previewMessage\",\r\n            \"method\": \"previewMessage\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:component-preview:**/\"; }\r\n}\r\nconst debounce = (fn, wait) => {\r\n    let timeout;\r\n    return (...args) => {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(fn, wait, ...args);\r\n    };\r\n};\r\n"}